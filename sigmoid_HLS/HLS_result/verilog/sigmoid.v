// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sigmoid,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.451000,HLS_SYN_LAT=1253,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=5117,HLS_SYN_LUT=6630,HLS_VERSION=2018_3}" *)

module sigmoid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 87'd1;
parameter    ap_ST_fsm_state2 = 87'd2;
parameter    ap_ST_fsm_state3 = 87'd4;
parameter    ap_ST_fsm_state4 = 87'd8;
parameter    ap_ST_fsm_state5 = 87'd16;
parameter    ap_ST_fsm_state6 = 87'd32;
parameter    ap_ST_fsm_state7 = 87'd64;
parameter    ap_ST_fsm_state8 = 87'd128;
parameter    ap_ST_fsm_state9 = 87'd256;
parameter    ap_ST_fsm_state10 = 87'd512;
parameter    ap_ST_fsm_state11 = 87'd1024;
parameter    ap_ST_fsm_state12 = 87'd2048;
parameter    ap_ST_fsm_state13 = 87'd4096;
parameter    ap_ST_fsm_state14 = 87'd8192;
parameter    ap_ST_fsm_state15 = 87'd16384;
parameter    ap_ST_fsm_state16 = 87'd32768;
parameter    ap_ST_fsm_state17 = 87'd65536;
parameter    ap_ST_fsm_state18 = 87'd131072;
parameter    ap_ST_fsm_state19 = 87'd262144;
parameter    ap_ST_fsm_state20 = 87'd524288;
parameter    ap_ST_fsm_state21 = 87'd1048576;
parameter    ap_ST_fsm_state22 = 87'd2097152;
parameter    ap_ST_fsm_state23 = 87'd4194304;
parameter    ap_ST_fsm_state24 = 87'd8388608;
parameter    ap_ST_fsm_state25 = 87'd16777216;
parameter    ap_ST_fsm_state26 = 87'd33554432;
parameter    ap_ST_fsm_state27 = 87'd67108864;
parameter    ap_ST_fsm_state28 = 87'd134217728;
parameter    ap_ST_fsm_state29 = 87'd268435456;
parameter    ap_ST_fsm_state30 = 87'd536870912;
parameter    ap_ST_fsm_state31 = 87'd1073741824;
parameter    ap_ST_fsm_state32 = 87'd2147483648;
parameter    ap_ST_fsm_state33 = 87'd4294967296;
parameter    ap_ST_fsm_state34 = 87'd8589934592;
parameter    ap_ST_fsm_state35 = 87'd17179869184;
parameter    ap_ST_fsm_state36 = 87'd34359738368;
parameter    ap_ST_fsm_state37 = 87'd68719476736;
parameter    ap_ST_fsm_state38 = 87'd137438953472;
parameter    ap_ST_fsm_state39 = 87'd274877906944;
parameter    ap_ST_fsm_state40 = 87'd549755813888;
parameter    ap_ST_fsm_state41 = 87'd1099511627776;
parameter    ap_ST_fsm_state42 = 87'd2199023255552;
parameter    ap_ST_fsm_state43 = 87'd4398046511104;
parameter    ap_ST_fsm_state44 = 87'd8796093022208;
parameter    ap_ST_fsm_state45 = 87'd17592186044416;
parameter    ap_ST_fsm_state46 = 87'd35184372088832;
parameter    ap_ST_fsm_state47 = 87'd70368744177664;
parameter    ap_ST_fsm_state48 = 87'd140737488355328;
parameter    ap_ST_fsm_state49 = 87'd281474976710656;
parameter    ap_ST_fsm_state50 = 87'd562949953421312;
parameter    ap_ST_fsm_state51 = 87'd1125899906842624;
parameter    ap_ST_fsm_state52 = 87'd2251799813685248;
parameter    ap_ST_fsm_state53 = 87'd4503599627370496;
parameter    ap_ST_fsm_state54 = 87'd9007199254740992;
parameter    ap_ST_fsm_state55 = 87'd18014398509481984;
parameter    ap_ST_fsm_state56 = 87'd36028797018963968;
parameter    ap_ST_fsm_state57 = 87'd72057594037927936;
parameter    ap_ST_fsm_state58 = 87'd144115188075855872;
parameter    ap_ST_fsm_state59 = 87'd288230376151711744;
parameter    ap_ST_fsm_state60 = 87'd576460752303423488;
parameter    ap_ST_fsm_state61 = 87'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 87'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 87'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 87'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 87'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 87'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 87'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 87'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 87'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 87'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 87'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 87'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 87'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 87'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 87'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 87'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 87'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 87'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 87'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 87'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 87'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 87'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 87'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 87'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 87'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 87'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 87'd77371252455336267181195264;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] x;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [86:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_77_p2;
reg   [63:0] reg_99;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state56;
wire   [63:0] tmp_neg_fu_109_p2;
reg   [63:0] tmp_neg_reg_135;
wire   [63:0] x_assign_fu_115_p1;
reg   [63:0] x_assign_reg_140;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_84_p2;
reg   [63:0] divider_reg_147;
wire    ap_CS_fsm_state14;
wire   [4:0] i_fu_125_p2;
reg   [4:0] i_reg_156;
wire   [0:0] exitcond_i_fu_119_p2;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_96_p1;
reg   [63:0] tmp_4_i_reg_167;
wire    ap_CS_fsm_state19;
reg   [63:0] base_reg_172;
wire    ap_CS_fsm_state25;
wire   [63:0] grp_fu_90_p2;
reg   [63:0] tmp_i_reg_177;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state51;
reg   [63:0] x_pn_i_reg_34;
wire    ap_CS_fsm_state8;
reg   [63:0] base_i_reg_44;
wire   [63:0] ap_phi_mux_exp_result_phi_fu_59_p4;
reg   [63:0] exp_result_reg_56;
reg   [4:0] i_i_reg_66;
reg   [63:0] grp_fu_77_p0;
reg   [63:0] grp_fu_77_p1;
wire    ap_CS_fsm_state46;
reg   [63:0] grp_fu_84_p0;
reg   [63:0] grp_fu_84_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state20;
reg   [63:0] grp_fu_90_p0;
reg   [63:0] grp_fu_90_p1;
wire    ap_CS_fsm_state57;
wire   [31:0] grp_fu_96_p0;
wire   [63:0] tmp_to_int_fu_105_p1;
wire    ap_CS_fsm_state87;
reg   [86:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 87'd1;
end

sigmoid_dadd_64ns_64ns_64_6_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sigmoid_dadd_64ns_64ns_64_6_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_77_p0),
    .din1(grp_fu_77_p1),
    .ce(1'b1),
    .dout(grp_fu_77_p2)
);

sigmoid_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sigmoid_dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_84_p0),
    .din1(grp_fu_84_p1),
    .ce(1'b1),
    .dout(grp_fu_84_p2)
);

sigmoid_ddiv_64ns_64ns_64_31_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sigmoid_ddiv_64ns_64ns_64_31_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_90_p0),
    .din1(grp_fu_90_p1),
    .ce(1'b1),
    .dout(grp_fu_90_p2)
);

sigmoid_sitodp_32ns_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sigmoid_sitodp_32ns_64_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_96_p0),
    .ce(1'b1),
    .dout(grp_fu_96_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        base_i_reg_44 <= base_reg_172;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        base_i_reg_44 <= 64'd4611686018427387904;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        exp_result_reg_56 <= grp_fu_77_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        exp_result_reg_56 <= reg_99;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_i_reg_66 <= i_reg_156;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_i_reg_66 <= 5'd2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        x_pn_i_reg_34 <= divider_reg_147;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_pn_i_reg_34 <= x_assign_reg_140;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        base_reg_172 <= grp_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        divider_reg_147 <= grp_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond_i_fu_119_p2 == 1'd0))) begin
        i_reg_156 <= i_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_99 <= grp_fu_77_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_4_i_reg_167 <= grp_fu_96_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        tmp_i_reg_177 <= grp_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_neg_reg_135 <= tmp_neg_fu_109_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_assign_reg_140 <= x_assign_fu_115_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_77_p0 = exp_result_reg_56;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_77_p0 = ap_phi_mux_exp_result_phi_fu_59_p4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_77_p0 = x_assign_fu_115_p1;
    end else begin
        grp_fu_77_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_77_p1 = tmp_i_reg_177;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_77_p1 = 64'd4607182418800017408;
    end else begin
        grp_fu_77_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_84_p0 = base_i_reg_44;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_84_p0 = x_pn_i_reg_34;
    end else begin
        grp_fu_84_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_84_p1 = tmp_4_i_reg_167;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_84_p1 = x_assign_reg_140;
    end else begin
        grp_fu_84_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_90_p0 = 64'd4607182418800017408;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_90_p0 = divider_reg_147;
    end else begin
        grp_fu_90_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_90_p1 = reg_99;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_90_p1 = base_i_reg_44;
    end else begin
        grp_fu_90_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (exitcond_i_fu_119_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_exp_result_phi_fu_59_p4 = exp_result_reg_56;

assign ap_return = grp_fu_90_p2;

assign exitcond_i_fu_119_p2 = ((i_i_reg_66 == 5'd30) ? 1'b1 : 1'b0);

assign grp_fu_96_p0 = i_reg_156;

assign i_fu_125_p2 = (i_i_reg_66 + 5'd1);

assign tmp_neg_fu_109_p2 = (tmp_to_int_fu_105_p1 ^ 64'd9223372036854775808);

assign tmp_to_int_fu_105_p1 = x;

assign x_assign_fu_115_p1 = tmp_neg_reg_135;

endmodule //sigmoid
