// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mul,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=529,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=386,HLS_SYN_LUT=612,HLS_VERSION=2018_3}" *)

module matrix_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [5:0] a_address1;
output   a_ce1;
input  [31:0] a_q1;
output  [5:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [5:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;
output  [5:0] c_address0;
output   c_ce0;
output   c_we0;
output  [31:0] c_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] a_address0;
reg a_ce0;
reg[5:0] a_address1;
reg a_ce1;
reg[5:0] b_address0;
reg b_ce0;
reg[5:0] b_address1;
reg b_ce1;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] reg_230;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg  signed [31:0] reg_234;
reg  signed [31:0] reg_238;
reg  signed [31:0] reg_242;
wire   [31:0] grp_fu_246_p2;
reg   [31:0] reg_258;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_252_p2;
reg   [31:0] reg_262;
wire   [3:0] i_1_fu_278_p2;
reg   [3:0] i_1_reg_535;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_1_cast_fu_297_p1;
reg   [7:0] tmp_1_cast_reg_540;
wire   [0:0] exitcond1_fu_272_p2;
reg   [5:0] a_addr_reg_545;
reg   [5:0] a_addr_1_reg_550;
reg   [5:0] a_addr_2_reg_555;
reg   [5:0] a_addr_3_reg_560;
reg   [5:0] a_addr_4_reg_565;
reg   [5:0] a_addr_5_reg_570;
reg   [5:0] a_addr_6_reg_575;
reg   [5:0] a_addr_7_reg_580;
wire   [3:0] j_1_fu_412_p2;
reg   [3:0] j_1_reg_588;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_406_p2;
wire  signed [3:0] tmp_16_fu_423_p2;
reg  signed [3:0] tmp_16_reg_598;
wire   [7:0] tmp_21_fu_496_p2;
reg   [7:0] tmp_21_reg_639;
wire   [31:0] tmp2_fu_501_p2;
reg   [31:0] tmp2_reg_644;
wire   [31:0] tmp1_fu_513_p2;
reg   [31:0] tmp1_reg_649;
wire   [31:0] grp_fu_266_p2;
reg   [31:0] tmp5_reg_654;
wire   [31:0] tmp_13_i_fu_523_p2;
reg   [31:0] tmp_13_i_reg_659;
wire    ap_CS_fsm_state9;
reg   [3:0] i_reg_207;
reg   [3:0] j_reg_218;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_1_fu_292_p1;
wire   [63:0] tmp_3_fu_307_p3;
wire   [63:0] tmp_5_fu_322_p3;
wire   [63:0] tmp_7_fu_337_p3;
wire   [63:0] tmp_9_fu_352_p3;
wire   [63:0] tmp_11_fu_367_p3;
wire   [63:0] tmp_13_fu_382_p3;
wire   [63:0] tmp_15_fu_397_p3;
wire   [63:0] tmp_s_fu_418_p1;
wire   [63:0] tmp_16_cast_fu_429_p1;
wire   [63:0] tmp_17_fu_434_p3;
wire   [63:0] tmp_18_cast_fu_446_p1;
wire   [63:0] tmp_18_fu_455_p3;
wire   [63:0] tmp_20_cast_fu_470_p1;
wire   [63:0] tmp_20_fu_479_p3;
wire   [63:0] tmp_22_cast_fu_491_p1;
wire   [63:0] tmp_23_cast_fu_528_p1;
wire   [6:0] tmp_fu_284_p3;
wire   [6:0] tmp_2_fu_301_p2;
wire   [6:0] tmp_4_fu_316_p2;
wire   [6:0] tmp_6_fu_331_p2;
wire   [6:0] tmp_8_fu_346_p2;
wire   [6:0] tmp_10_fu_361_p2;
wire   [6:0] tmp_12_fu_376_p2;
wire   [6:0] tmp_14_fu_391_p2;
wire  signed [4:0] tmp_18_cast5_fu_443_p1;
wire   [5:0] tmp_cast2_fu_451_p1;
wire   [5:0] tmp_19_fu_464_p2;
wire  signed [5:0] tmp_22_cast4_fu_488_p1;
wire   [7:0] tmp_cast3_fu_475_p1;
wire   [31:0] tmp3_fu_507_p2;
wire   [31:0] tmp4_fu_518_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_406_p2 == 1'd1))) begin
        i_reg_207 <= i_1_reg_535;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_207 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_272_p2 == 1'd0))) begin
        j_reg_218 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_218 <= j_1_reg_588;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_272_p2 == 1'd0))) begin
        a_addr_1_reg_550[5 : 3] <= tmp_3_fu_307_p3[5 : 3];
        a_addr_2_reg_555[5 : 3] <= tmp_5_fu_322_p3[5 : 3];
        a_addr_3_reg_560[5 : 3] <= tmp_7_fu_337_p3[5 : 3];
        a_addr_4_reg_565[5 : 3] <= tmp_9_fu_352_p3[5 : 3];
        a_addr_5_reg_570[5 : 3] <= tmp_11_fu_367_p3[5 : 3];
        a_addr_6_reg_575[5 : 3] <= tmp_13_fu_382_p3[5 : 3];
        a_addr_7_reg_580[5 : 3] <= tmp_15_fu_397_p3[5 : 3];
        a_addr_reg_545[5 : 3] <= tmp_1_fu_292_p1[5 : 3];
        tmp_1_cast_reg_540[6 : 3] <= tmp_1_cast_fu_297_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_535 <= i_1_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_588 <= j_1_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_230 <= a_q0;
        reg_234 <= a_q1;
        reg_238 <= b_q0;
        reg_242 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_258 <= grp_fu_246_p2;
        reg_262 <= grp_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp1_reg_649 <= tmp1_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp2_reg_644 <= tmp2_fu_501_p2;
        tmp_21_reg_639 <= tmp_21_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp5_reg_654 <= grp_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_13_i_reg_659 <= tmp_13_i_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_406_p2 == 1'd0))) begin
        tmp_16_reg_598 <= tmp_16_fu_423_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address0 = a_addr_6_reg_575;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = a_addr_4_reg_565;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = a_addr_2_reg_555;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = a_addr_reg_545;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address1 = a_addr_7_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address1 = a_addr_5_reg_570;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address1 = a_addr_3_reg_560;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address1 = a_addr_1_reg_550;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_272_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_272_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_address0 = tmp_20_fu_479_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address0 = tmp_18_fu_455_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_address0 = tmp_17_fu_434_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address0 = tmp_s_fu_418_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_address1 = tmp_22_cast_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address1 = tmp_20_cast_fu_470_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_address1 = tmp_18_cast_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address1 = tmp_16_cast_fu_429_p1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_272_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_406_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_address0 = tmp_23_cast_fu_528_p1;

assign c_d0 = tmp_13_i_reg_659;

assign exitcond1_fu_272_p2 = ((i_reg_207 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_406_p2 = ((j_reg_218 == 4'd8) ? 1'b1 : 1'b0);

assign grp_fu_246_p2 = ($signed(reg_230) * $signed(reg_238));

assign grp_fu_252_p2 = ($signed(reg_234) * $signed(reg_242));

assign grp_fu_266_p2 = (reg_262 + reg_258);

assign i_1_fu_278_p2 = (i_reg_207 + 4'd1);

assign j_1_fu_412_p2 = (j_reg_218 + 4'd1);

assign tmp1_fu_513_p2 = (tmp2_reg_644 + tmp3_fu_507_p2);

assign tmp2_fu_501_p2 = (reg_258 + reg_262);

assign tmp3_fu_507_p2 = (reg_262 + reg_258);

assign tmp4_fu_518_p2 = (tmp5_reg_654 + grp_fu_266_p2);

assign tmp_10_fu_361_p2 = (tmp_fu_284_p3 | 7'd5);

assign tmp_11_fu_367_p3 = {{57'd0}, {tmp_10_fu_361_p2}};

assign tmp_12_fu_376_p2 = (tmp_fu_284_p3 | 7'd6);

assign tmp_13_fu_382_p3 = {{57'd0}, {tmp_12_fu_376_p2}};

assign tmp_13_i_fu_523_p2 = (tmp1_reg_649 + tmp4_fu_518_p2);

assign tmp_14_fu_391_p2 = (tmp_fu_284_p3 | 7'd7);

assign tmp_15_fu_397_p3 = {{57'd0}, {tmp_14_fu_391_p2}};

assign tmp_16_cast_fu_429_p1 = $unsigned(tmp_16_fu_423_p2);

assign tmp_16_fu_423_p2 = (j_reg_218 ^ 4'd8);

assign tmp_17_fu_434_p3 = {{60'd1}, {j_reg_218}};

assign tmp_18_cast5_fu_443_p1 = tmp_16_reg_598;

assign tmp_18_cast_fu_446_p1 = $unsigned(tmp_18_cast5_fu_443_p1);

assign tmp_18_fu_455_p3 = {{60'd2}, {j_reg_218}};

assign tmp_19_fu_464_p2 = ($signed(tmp_cast2_fu_451_p1) + $signed(6'd40));

assign tmp_1_cast_fu_297_p1 = tmp_fu_284_p3;

assign tmp_1_fu_292_p1 = tmp_fu_284_p3;

assign tmp_20_cast_fu_470_p1 = tmp_19_fu_464_p2;

assign tmp_20_fu_479_p3 = {{60'd3}, {j_reg_218}};

assign tmp_21_fu_496_p2 = (tmp_1_cast_reg_540 + tmp_cast3_fu_475_p1);

assign tmp_22_cast4_fu_488_p1 = tmp_16_reg_598;

assign tmp_22_cast_fu_491_p1 = $unsigned(tmp_22_cast4_fu_488_p1);

assign tmp_23_cast_fu_528_p1 = tmp_21_reg_639;

assign tmp_2_fu_301_p2 = (tmp_fu_284_p3 | 7'd1);

assign tmp_3_fu_307_p3 = {{57'd0}, {tmp_2_fu_301_p2}};

assign tmp_4_fu_316_p2 = (tmp_fu_284_p3 | 7'd2);

assign tmp_5_fu_322_p3 = {{57'd0}, {tmp_4_fu_316_p2}};

assign tmp_6_fu_331_p2 = (tmp_fu_284_p3 | 7'd3);

assign tmp_7_fu_337_p3 = {{57'd0}, {tmp_6_fu_331_p2}};

assign tmp_8_fu_346_p2 = (tmp_fu_284_p3 | 7'd4);

assign tmp_9_fu_352_p3 = {{57'd0}, {tmp_8_fu_346_p2}};

assign tmp_cast2_fu_451_p1 = j_reg_218;

assign tmp_cast3_fu_475_p1 = j_reg_218;

assign tmp_fu_284_p3 = {{i_reg_207}, {3'd0}};

assign tmp_s_fu_418_p1 = j_reg_218;

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_540[2:0] <= 3'b000;
    tmp_1_cast_reg_540[7] <= 1'b0;
    a_addr_reg_545[2:0] <= 3'b000;
    a_addr_1_reg_550[2:0] <= 3'b001;
    a_addr_2_reg_555[2:0] <= 3'b010;
    a_addr_3_reg_560[2:0] <= 3'b011;
    a_addr_4_reg_565[2:0] <= 3'b100;
    a_addr_5_reg_570[2:0] <= 3'b101;
    a_addr_6_reg_575[2:0] <= 3'b110;
    a_addr_7_reg_580[2:0] <= 3'b111;
end

endmodule //matrix_mul
