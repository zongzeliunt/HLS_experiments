// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mul,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=2193,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=173,HLS_SYN_LUT=254,HLS_VERSION=2018_3}" *)

module matrix_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [5:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [5:0] c_address0;
output   c_ce0;
output   c_we0;
output  [31:0] c_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_1_fu_120_p2;
reg   [3:0] i_1_reg_224;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_1_cast_fu_134_p1;
reg   [7:0] tmp_1_cast_reg_229;
wire   [0:0] exitcond2_fu_114_p2;
wire   [3:0] j_1_fu_144_p2;
reg   [3:0] j_1_reg_238;
wire    ap_CS_fsm_state3;
wire   [7:0] tmp_2_cast_fu_150_p1;
reg   [7:0] tmp_2_cast_reg_243;
wire   [0:0] exitcond1_fu_138_p2;
reg   [5:0] c_addr_reg_248;
wire   [3:0] k_1_fu_170_p2;
reg   [3:0] k_1_reg_256;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_164_p2;
reg  signed [31:0] a_load_reg_271;
wire    ap_CS_fsm_state5;
reg  signed [31:0] b_load_reg_276;
wire   [31:0] tmp_5_fu_212_p2;
reg   [31:0] tmp_5_reg_281;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_6_fu_216_p2;
wire    ap_CS_fsm_state7;
reg   [3:0] i_reg_68;
reg   [3:0] j_reg_79;
reg   [31:0] c_load_reg_90;
reg   [3:0] k_reg_103;
wire   [63:0] tmp_3_cast_fu_159_p1;
wire   [63:0] tmp_7_cast_fu_185_p1;
wire   [63:0] tmp_10_cast_fu_207_p1;
wire   [6:0] tmp_fu_126_p3;
wire   [7:0] tmp_3_fu_154_p2;
wire   [7:0] tmp_4_cast_fu_176_p1;
wire   [7:0] tmp_7_fu_180_p2;
wire   [6:0] tmp_8_fu_190_p3;
wire   [7:0] tmp_9_cast_fu_198_p1;
wire   [7:0] tmp_s_fu_202_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_load_reg_90 <= tmp_6_fu_216_p2;
    end else if (((exitcond1_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_load_reg_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_68 <= i_1_reg_224;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_68 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_79 <= j_1_reg_238;
    end else if (((exitcond2_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_79 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_reg_103 <= k_1_reg_256;
    end else if (((exitcond1_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_103 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_load_reg_271 <= a_q0;
        b_load_reg_276 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_addr_reg_248 <= tmp_3_cast_fu_159_p1;
        tmp_2_cast_reg_243[3 : 0] <= tmp_2_cast_fu_150_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_224 <= i_1_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_238 <= j_1_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_1_reg_256 <= k_1_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_cast_reg_229[6 : 3] <= tmp_1_cast_fu_134_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_5_reg_281 <= tmp_5_fu_212_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = tmp_7_cast_fu_185_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign b_address0 = tmp_10_cast_fu_207_p1;

assign c_address0 = c_addr_reg_248;

assign c_d0 = c_load_reg_90;

assign exitcond1_fu_138_p2 = ((j_reg_79 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond2_fu_114_p2 = ((i_reg_68 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_164_p2 = ((k_reg_103 == 4'd8) ? 1'b1 : 1'b0);

assign i_1_fu_120_p2 = (i_reg_68 + 4'd1);

assign j_1_fu_144_p2 = (j_reg_79 + 4'd1);

assign k_1_fu_170_p2 = (k_reg_103 + 4'd1);

assign tmp_10_cast_fu_207_p1 = tmp_s_fu_202_p2;

assign tmp_1_cast_fu_134_p1 = tmp_fu_126_p3;

assign tmp_2_cast_fu_150_p1 = j_reg_79;

assign tmp_3_cast_fu_159_p1 = tmp_3_fu_154_p2;

assign tmp_3_fu_154_p2 = (tmp_1_cast_reg_229 + tmp_2_cast_fu_150_p1);

assign tmp_4_cast_fu_176_p1 = k_reg_103;

assign tmp_5_fu_212_p2 = ($signed(a_load_reg_271) * $signed(b_load_reg_276));

assign tmp_6_fu_216_p2 = (c_load_reg_90 + tmp_5_reg_281);

assign tmp_7_cast_fu_185_p1 = tmp_7_fu_180_p2;

assign tmp_7_fu_180_p2 = (tmp_4_cast_fu_176_p1 + tmp_1_cast_reg_229);

assign tmp_8_fu_190_p3 = {{k_reg_103}, {3'd0}};

assign tmp_9_cast_fu_198_p1 = tmp_8_fu_190_p3;

assign tmp_fu_126_p3 = {{i_reg_68}, {3'd0}};

assign tmp_s_fu_202_p2 = (tmp_2_cast_reg_243 + tmp_9_cast_fu_198_p1);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_229[2:0] <= 3'b000;
    tmp_1_cast_reg_229[7] <= 1'b0;
    tmp_2_cast_reg_243[7:4] <= 4'b0000;
end

endmodule //matrix_mul
